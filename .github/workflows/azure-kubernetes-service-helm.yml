name: Build and deploy an app to AKS with Helm

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  AZURE_CONTAINER_REGISTRY: "sebastianregistry"
  CONTAINER_NAME: "product-service"     
  RESOURCE_GROUP: "my-aks-group"
  CLUSTER_NAME: "my-aks-cluster"
  CHART_PATH: "API/charts/mi-app"
  CHART_OVERRIDE_PATH: "API/charts/mi-app/override.yaml"

jobs:
  buildImage:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
      - name: Build and push image to ACR
        run: |
          az acr build \
            --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }} \
            --registry ${{ env.AZURE_CONTAINER_REGISTRY }} \
            -g ${{ env.RESOURCE_GROUP }} .

  runTests:
    runs-on: ubuntu-latest
    needs: [buildImage]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: npm install express
      - name: Start app in background
        run: |
          nohup node app.js &
          sleep 5
      - name: Test success GET /product
        run: |
          status=$(curl -s -o /dev/null -w "%{http_code}" \
            -X GET http://127.0.0.1:8000/product \
            -H "Accept: application/json")
          if [ "$status" -ne 200 ]; then echo "Esperaba 200, recibí $status"; exit 1; fi
      - name: Test success POST /product
        run: |
          status=$(curl -s -o /dev/null -w "%{http_code}" \
            -X POST http://127.0.0.1:8000/product \
            -H "Content-Type: application/json" \
            -d '{ "nombre":"Teclado", "precio":45, "categoriaID":20 }')
          if [ "$status" -ne 201 ]; then echo "Esperaba 201, recibí $status"; exit 1; fi
      - name: Test failure GET /product?fail=true
        if: contains(github.event.head_commit.message, 'Test')
        run: |
          status=$(curl -s -o /dev/null -w "%{http_code}" \
            -X GET http://127.0.0.1:8000/product?fail=true)
          if [ "$status" -ge 400 ]; then echo "Error HTTP $status"; exit 1; fi
      - name: Test failure GET /product/999
        if: contains(github.event.head_commit.message, 'Test')
        run: |
          status=$(curl -s -o /dev/null -w "%{http_code}" \
            -X GET http://127.0.0.1:8000/product/999)
          if [ "$status" -ge 400 ]; then echo "Error HTTP $status"; exit 1; fi

  deploy:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: [buildImage, runTests]
    steps:
      - uses: actions/checkout@v4
      - name: Azure login
        uses: azure/login@v1.4.6
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Set up kubelogin (non-interactive)
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'
      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
          admin: false
          use-kubelogin: true

      # ——— Aquí viene el paso de bake con Helm ———
      - name: Bake deployment
        uses: azure/k8s-bake@v3
        id: bake
        with:
          renderEngine: "helm"
          helmChart: ${{ env.CHART_PATH }}
          overrideFiles: ${{ env.CHART_OVERRIDE_PATH }}
          overrides: |
            image.repository: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}
            image.tag: ${{ github.sha }}
            replicas: 2
          helm-version: "latest"

      - name: Deploy application
        uses: Azure/k8s-deploy@v4
        with:
          action: deploy
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          images: |
            ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}
